/// <reference types="@sanity-codegen/types/schema-codegen" />
import { ResolveConfigOptions } from 'prettier';
export interface GenerateSchemaTypesOptions {
    /**
     * A normalized schema (result of the `schemaNormalizer`)
     * @see schemaNormalizer
     */
    normalizedSchema: Sanity.SchemaDef.Schema;
    /**
     * Optionally provide a function that generates the typescript type identifer
     * from the sanity type name. Use this function to override the default and
     * prevent naming collisions.
     */
    generateTypeName?: (sanityTypeName: string) => string;
    /**
     * This option is fed directly to prettier `resolveConfig`
     *
     * https://prettier.io/docs/en/api.html#prettierresolveconfigfilepath--options
     */
    prettierResolveConfigPath?: string;
    /**
     * This options is also fed directly to prettier `resolveConfig`
     *
     * https://prettier.io/docs/en/api.html#prettierresolveconfigfilepath--options
     */
    prettierResolveConfigOptions?: ResolveConfigOptions;
}
/**
 * Converts a normalized schema schema definitions (created from
 * `@sanity-codegen/extractor`) and returns a TypeScript string formatted with
 * prettier.
 *
 * Note this function returns a string representation in order to embed
 * comments in a simple manner. Run it through babel or TypeScript to get an
 * AST.
 *
 * @param param0 options
 */
export declare function generateSchemaTypes({ normalizedSchema: { documents, registeredTypes }, generateTypeName, prettierResolveConfigOptions, prettierResolveConfigPath, }: GenerateSchemaTypesOptions): Promise<string>;
//# sourceMappingURL=generate-schema-types.d.ts.map